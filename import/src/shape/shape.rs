use crate::coord::Point;
use crate::create_id_type;

create_id_type!(ShapeId);

pub(crate) type Shape = Vec<Point>;

#[cfg(test)]
pub(crate) mod fixtures {
    macro_rules! shapes {
        ($($line:ident: {$($shape:ident => [$($lat:expr, $lon:expr);* $(;)?]),* $(,)?}),* $(,)?) => (
            $(
                pub(crate) mod $line {
                    use std::collections::HashMap;

                    use test_utils::map;
                    use crate::coord::project;
                    use crate::shape::{Shape, ShapeId};

                    $(
                        pub(crate) fn $shape() -> Shape {
                            vec![$(project($lat, $lon)),*]
                        }
                    )*

                    #[allow(dead_code)]
                    pub(crate) fn by_id() -> HashMap<ShapeId, Shape> {
                        map! {
                            $( stringify!($shape) => $shape() ),*
                        }
                    }
                }
            )*
        );
    }

    shapes! {
        tram_12: {
            oranienburger_tor_am_kupfergraben => [
                52.525, 13.388; 52.524, 13.388; 52.521, 13.388; 52.520, 13.388; 52.519, 13.388; 52.519, 13.389; 52.519, 13.390;
                52.519, 13.391; 52.519, 13.392; 52.519, 13.396;
            ],
            am_kupfergraben_oranienburger_tor => [
                52.519, 13.396; 52.520, 13.396; 52.521, 13.395; 52.521, 13.394; 52.520, 13.393; 52.520, 13.391; 52.520, 13.390;
                52.519, 13.390; 52.519, 13.389; 52.520, 13.388; 52.521, 13.388; 52.522, 13.388; 52.524, 13.388; 52.525, 13.388;
            ],
        },
        bus_m41: {
            anhalter_bahnhof_hauptbahnhof => [
                52.505, 13.382; 52.506, 13.380; 52.507, 13.380; 52.507, 13.379; 52.508, 13.378; 52.509, 13.377; 52.510, 13.377;
                52.511, 13.377; 52.512, 13.377; 52.512, 13.376; 52.512, 13.374; 52.511, 13.372; 52.511, 13.371; 52.512, 13.371;
                52.513, 13.371; 52.514, 13.371; 52.516, 13.371; 52.518, 13.372; 52.519, 13.372; 52.520, 13.373; 52.521, 13.373;
                52.521, 13.372; 52.5257,13.368; 52.526, 13.368; 52.527, 13.368; 52.528, 13.368; 52.527, 13.369;
            ],
            hauptbahnhof_anhalter_bahnhof => [
                52.527, 13.369; 52.526, 13.369; 52.5262,13.368; 52.522, 13.372; 52.521, 13.372; 52.520, 13.372; 52.518, 13.371;
                52.516, 13.371; 52.514, 13.370; 52.513, 13.371; 52.512, 13.371; 52.511, 13.371; 52.511, 13.372; 52.511, 13.374;
                52.512, 13.374; 52.512, 13.376; 52.512, 13.377; 52.511, 13.377; 52.510, 13.377; 52.509, 13.377; 52.508, 13.377;
                52.508, 13.378; 52.507, 13.379; 52.506, 13.380; 52.505, 13.382;
            ],
        },
        bus_114: {
            wannsee_heckeshorn_wannsee => [
                52.422, 13.178; 52.421, 13.178; 52.421, 13.177; 52.421, 13.176; 52.420, 13.175; 52.420, 13.174; 52.421, 13.174;
                52.421, 13.173; 52.421, 13.172; 52.421, 13.171; 52.421, 13.170; 52.421, 13.169; 52.421, 13.168; 52.421, 13.167;
                52.421, 13.166; 52.421, 13.165; 52.422, 13.165; 52.422, 13.164; 52.423, 13.163; 52.423, 13.162; 52.424, 13.162;
                52.425, 13.161; 52.426, 13.161; 52.427, 13.162; 52.428, 13.162; 52.428, 13.163; 52.429, 13.164; 52.430, 13.164;
                52.430, 13.165; 52.431, 13.165; 52.432, 13.165; 52.433, 13.164; 52.432, 13.163; 52.432, 13.162; 52.431, 13.162;
                52.431, 13.161; 52.430, 13.161; 52.429, 13.160; 52.428, 13.160; 52.427, 13.160; 52.427, 13.159; 52.426, 13.160;
                52.424, 13.160; 52.421, 13.162; 52.420, 13.162; 52.420, 13.166; 52.420, 13.167; 52.421, 13.168; 52.421, 13.170;
                52.421, 13.171; 52.421, 13.172; 52.421, 13.173; 52.420, 13.174; 52.420, 13.175; 52.420, 13.176; 52.421, 13.176;
                52.421, 13.177; 52.421, 13.178; 52.422, 13.179; 52.422, 13.180; 52.422, 13.179; 52.422, 13.178;
            ],
        }
    }
}

#[cfg(test)]
mod tests {
    #[macro_export]
    macro_rules! shape {
        ($($lat:expr, $lon:expr);*) => (
            vec![$($crate::coord::project($lat, $lon)),*]
        );
        (blue) => (
            $crate::shape!(52.526, 13.369; 52.523, 13.378; 52.520, 13.387; 52.521, 13.394; 52.523, 13.402)
        );
        ($shape:ident reversed) => ({
            let mut shape = $crate::shape!($shape);
            shape.reverse();
            shape
        });
    }
}
